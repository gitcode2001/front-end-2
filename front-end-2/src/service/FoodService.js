import axios from "axios";

const API_URL = "http://localhost:8080/api/foods"; // Thay b·∫±ng API c·ªßa backend
const CATEGORY_API_URL = "http://localhost:8080/api/categories"; // API danh m·ª•c

// H√†m l·∫•y headers ch·ª©a token
const getHeaders = () => {
    const token = localStorage.getItem("token");
    return {
        "Content-Type": "application/json",
        ...(token && { Authorization: `Bearer ${token}` }),
    };
};


export const getAllFoods = async () => {
    try {
        const response = await axios.get(`${API_URL}?include=category`, { headers: getHeaders() });
        return response.data;
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch m√≥n ƒÉn:", error.response?.data || error.message);
        throw error;
    }
};

// üîπ L·∫•y m√≥n ƒÉn theo ID
export const getFoodById = async (id) => {
    try {
        const response = await axios.get(`${API_URL}/${id}`, { headers: getHeaders() });
        return response.data;
    } catch (error) {
        console.error("L·ªói khi l·∫•y m√≥n ƒÉn:", error.response?.data || error.message);
        throw error;
    }
};

// üîπ Th√™m m√≥n ƒÉn m·ªõi
export const createFood = async (food) => {
    try {
        const response = await axios.post(API_URL, food, { headers: getHeaders() });
        return response.data;
    } catch (error) {
        console.error("L·ªói khi th√™m m√≥n ƒÉn:", error.response?.data || error.message);
        throw error;
    }
};

// üîπ C·∫≠p nh·∫≠t m√≥n ƒÉn
export const updateFood = async (id, food) => {
    try {
        const response = await axios.put(`${API_URL}/${id}`, food, { headers: getHeaders() });
        return response.data;
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t m√≥n ƒÉn:", error.response?.data || error.message);
        throw error;
    }
};

// üîπ X√≥a m√≥n ƒÉn
export const deleteFood = async (id) => {
    try {
        await axios.delete(`${API_URL}/${id}`, { headers: getHeaders() });
        return true;
    } catch (error) {
        console.error("L·ªói khi x√≥a m√≥n ƒÉn:", error.response?.data || error.message);
        throw error;
    }
};

// üîπ L·∫•y danh s√°ch danh m·ª•c m√≥n ƒÉn
export const getAllCategories = async () => {
    try {
        const response = await axios.get(CATEGORY_API_URL, { headers: getHeaders() });
        return response.data;
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh m·ª•c m√≥n ƒÉn:", error.response?.data || error.message);
        throw error;
    }
};

// üîπ L·∫•y danh m·ª•c theo ID
export const getCategoryById = async (id) => {
    try {
        const response = await axios.get(`${CATEGORY_API_URL}/${id}`, { headers: getHeaders() });
        return response.data;
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh m·ª•c:", error.response?.data || error.message);
        throw error;
    }
};

// üîπ Th√™m danh m·ª•c m·ªõi
export const createCategory = async (category) => {
    try {
        const response = await axios.post(CATEGORY_API_URL, category, { headers: getHeaders() });
        return response.data;
    } catch (error) {
        console.error("L·ªói khi th√™m danh m·ª•c:", error.response?.data || error.message);
        throw error;
    }
};

// üîπ C·∫≠p nh·∫≠t danh m·ª•c
export const updateCategory = async (id, category) => {
    try {
        const response = await axios.put(`${CATEGORY_API_URL}/${id}`, category, { headers: getHeaders() });
        return response.data;
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c:", error.response?.data || error.message);
        throw error;
    }
};

export const deleteCategory = async (id) => {
    try {
        await axios.delete(`${CATEGORY_API_URL}/${id}`, { headers: getHeaders() });
        return true;
    } catch (error) {
        console.error("L·ªói khi x√≥a danh m·ª•c:", error.response?.data || error.message);
        throw error;
    }
};
