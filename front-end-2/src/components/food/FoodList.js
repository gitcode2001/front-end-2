import React, { useEffect, useState } from "react";
import {
    Box,
    Button,
    CircularProgress,
    Container,
    Grid,
    List,
    ListItem,
    ListItemText,
    Paper,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Typography,
    Chip,
    TextField,
} from "@mui/material";
import { useNavigate } from "react-router-dom";
import AddShoppingCartIcon from "@mui/icons-material/AddShoppingCart";
import { getAllFoods, getAllCategories } from "../../service/FoodService";
import { createCart } from "../../service/CartService"; // S·ª≠a l·∫°i import addToCart
import Navbar from "../../component/home/Navbar";
import Footer from "../../component/home/Footer";

const FoodList = () => {
    const [foods, setFoods] = useState([]);
    const [categories, setCategories] = useState([]);
    const [selectedCategoryId, setSelectedCategoryId] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState("");

    const navigate = useNavigate();
    // Chuy·ªÉn role v·ªÅ in hoa ƒë·ªÉ so s√°nh
    const role = (localStorage.getItem("role") || "").toUpperCase();

    useEffect(() => {
        fetchFoods();
        fetchCategories();
    }, []);

    // L·∫•y danh s√°ch m√≥n ƒÉn
    const fetchFoods = async () => {
        try {
            setLoading(true);
            const data = await getAllFoods();
            setFoods(data);
        } catch (err) {
            setError("L·ªói khi t·∫£i danh s√°ch m√≥n ƒÉn!");
        } finally {
            setLoading(false);
        }
    };

    // L·∫•y danh m·ª•c
    const fetchCategories = async () => {
        try {
            const data = await getAllCategories();
            setCategories(data);
        } catch (err) {
            console.error("L·ªói khi t·∫£i danh m·ª•c!", err);
        }
    };

    // Ch·ªçn danh m·ª•c
    const handleCategoryClick = (category) => {
        setSelectedCategoryId(category ? category.id : null);
    };

    // Th√™m m√≥n v√†o gi·ªè h√†ng (d√†nh cho user/employee)
    const handleAddToCart = async (food) => {
        const userId = localStorage.getItem("userId");
        if (!userId) {
            alert("‚ö† B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng!");
            return;
        }
        try {
            await createCart(userId, food.id, 1, "");
            alert(`üõí ƒê√£ th√™m "${food.name}" v√†o gi·ªè h√†ng!`);
        } catch (err) {
            console.error("‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:", err);
            alert("‚ùå Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng! Ki·ªÉm tra console ƒë·ªÉ bi·∫øt chi ti·∫øt.");
        }
    };

    // S·ª≠a m√≥n (d√†nh cho admin)
    const handleEdit = (foodId) => {
        navigate(`/food/edit/${foodId}`);
    };

    // X√≥a m√≥n (d√†nh cho admin)
    const handleDelete = async (foodId) => {
        if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m√≥n ƒÉn n√†y kh√¥ng?")) {
            try {
                // G·ªçi API x√≥a m√≥n, v√≠ d·ª•: await deleteFood(foodId);
                alert("X√≥a th√†nh c√¥ng!");
                fetchFoods();
            } catch (error) {
                console.error("L·ªói khi x√≥a m√≥n ƒÉn:", error);
                alert("X√≥a th·∫•t b·∫°i!");
            }
        }
    };

    return (
        <div>
            <Navbar />
            <Container sx={{ mt: 2 }}>
                <Typography variant="h5" sx={{ mb: 2, textAlign: "center" }}>
                    üçΩ Danh s√°ch m√≥n ƒÉn
                </Typography>

                <Grid container spacing={3}>
                    {/* C·ªôt tr√°i (Danh m·ª•c m√≥n ƒÉn) */}
                    <Grid item xs={12} md={2}>
                        <Paper sx={{ p: 2 }}>
                            <Typography variant="h6" sx={{ textAlign: "center", mb: 2 }}>
                                üìÇ Danh m·ª•c
                            </Typography>
                            <List>
                                <ListItem
                                    button
                                    selected={!selectedCategoryId}
                                    onClick={() => handleCategoryClick(null)}
                                >
                                    <ListItemText primary="T·∫•t c·∫£ m√≥n ƒÉn" />
                                </ListItem>
                                {categories.map((category) => (
                                    <ListItem
                                        button
                                        key={category.id}
                                        selected={selectedCategoryId === category.id}
                                        onClick={() => handleCategoryClick(category)}
                                    >
                                        <ListItemText primary={category.name} />
                                    </ListItem>
                                ))}
                            </List>
                        </Paper>
                    </Grid>

                    {/* C·ªôt ph·∫£i (Danh s√°ch m√≥n ƒÉn) */}
                    <Grid item xs={12} md={10}>
                        <Paper sx={{ p: 2 }}>
                            {loading ? (
                                <Box sx={{ display: "flex", justifyContent: "center" }}>
                                    <CircularProgress />
                                </Box>
                            ) : error ? (
                                <Typography color="error" textAlign="center">
                                    {error}
                                </Typography>
                            ) : (
                                <TableContainer
                                    component={Paper}
                                    sx={{ height: 500, maxHeight: 500, overflowY: "auto" }}
                                >
                                    <Table>
                                        <TableHead sx={{ backgroundColor: "#f5f5f5" }}>
                                            <TableRow>
                                                <TableCell>H√¨nh ·∫£nh</TableCell>
                                                <TableCell>T√™n m√≥n</TableCell>
                                                <TableCell>Danh m·ª•c</TableCell>
                                                <TableCell>Gi√°</TableCell>
                                                <TableCell>Tr·∫°ng th√°i</TableCell>
                                                <TableCell>H√†nh ƒë·ªông</TableCell>
                                            </TableRow>
                                        </TableHead>
                                        <TableBody>
                                            {foods
                                                .filter(
                                                    (food) =>
                                                        !selectedCategoryId ||
                                                        food.category?.id === selectedCategoryId
                                                )
                                                .map((food) => (
                                                    <TableRow key={food.id}>
                                                        <TableCell>
                                                            <img
                                                                src={
                                                                    food.imageUrl ||
                                                                    "https://via.placeholder.com/80"
                                                                }
                                                                alt={food.name}
                                                                width="80"
                                                                height="80"
                                                                style={{
                                                                    objectFit: "contain",
                                                                    borderRadius: "5px",
                                                                }}
                                                            />
                                                        </TableCell>
                                                        <TableCell>{food.name}</TableCell>
                                                        <TableCell>
                                                            {food.category
                                                                ? food.category.name
                                                                : "Kh√¥ng c√≥"}
                                                        </TableCell>
                                                        <TableCell>
                                                            {food.price?.toLocaleString()} VNƒê
                                                        </TableCell>
                                                        <TableCell>
                                                            <Chip
                                                                label={
                                                                    food.status === "ACTIVE"
                                                                        ? "C√≤n M√≥n"
                                                                        : "H·∫øt H√†ng"
                                                                }
                                                                color={
                                                                    food.status === "ACTIVE"
                                                                        ? "success"
                                                                        : "error"
                                                                }
                                                            />
                                                        </TableCell>
                                                        <TableCell>
                                                            {role === "ADMIN" ? (
                                                                <>
                                                                    <Button
                                                                        variant="contained"
                                                                        color="primary"
                                                                        size="small"
                                                                        onClick={() => handleEdit(food.id)}
                                                                        sx={{ mr: 1 }}
                                                                    >
                                                                        S·ª≠a
                                                                    </Button>
                                                                    <Button
                                                                        variant="outlined"
                                                                        color="secondary"
                                                                        size="small"
                                                                        onClick={() => handleDelete(food.id)}
                                                                    >
                                                                        X√≥a
                                                                    </Button>
                                                                </>
                                                            ) : (
                                                                <Button
                                                                    variant="contained"
                                                                    color="success"
                                                                    size="small"
                                                                    startIcon={<AddShoppingCartIcon />}
                                                                    onClick={() => handleAddToCart(food)}
                                                                >
                                                                    Th√™m v√†o gi·ªè h√†ng
                                                                </Button>
                                                            )}
                                                        </TableCell>
                                                    </TableRow>
                                                ))}
                                        </TableBody>
                                    </Table>
                                </TableContainer>
                            )}
                        </Paper>
                    </Grid>
                </Grid>
            </Container>
            <Footer />
        </div>
    );
};

export default FoodList;
